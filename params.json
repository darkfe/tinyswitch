{"name":"Tinyswitch","tagline":"tinyswitch","body":"TinySwitch\r\n==========\r\n\r\nTinySwitch 是一个无聊的低性能的jquery插件,主要用来解决这种场景下的问题:\r\n\r\n1. 点击 radio A, 隐藏一片区域, 点击radio B, 隐藏这篇区域\r\n2. 勾选 checkbox, 启用一部分控件,  取消勾选 checkbox, 禁用一部分控件\r\n3. 一堆单选框,最后一个选项叫自定义,点击自定义,后面出现一个文本框,并且自动获取焦点,点击其他选项,文本框又消失了\r\n\r\n这种无聊并且重复的逻辑大量充斥在各种表单中.\r\n\r\nTinySwitch 提供了这样的一种方案来试图简化(或者复杂化?)这个鸟玩意儿.\r\n\r\n你只需要在控件上配置:\r\n\r\n```\r\ndata-tinyswitch=\"expr ? action1 : action2 selector\"\r\n```\r\n\r\n就可以操控对应的内容展示隐藏,或者启用禁用,以及其他一些别的什么逻辑.\r\n\r\n* `expr`     为判断执行`action`方式, 目前支持判断`checked`,`value`和`index`.\r\n* `selector` 为标准的jQuery支持的css选择器, 它告诉`TinySwitch`, 谁是点击后的操作对象\r\n* `action1`  当`expr`结果为`true`时执行这个行为 \r\n* `action2`  当`expr`结果为`false`时执行这个行为 \r\n\r\n### 单选框\r\n\r\n由于单选框自己不会主动触发`取消选中`这个行为, 所以单选框只需要配置`选中`行为, 例如:\r\n\r\n```html\r\n<label>\r\n  <input type=\"radio\" data-tinyswitch=\"checked ? show #box\"> 显示box\r\n</label>\r\n\r\n<label>\r\n  <input type=\"radio\" data-tinyswitch=\"checked ? hide #box\"> 隐藏box\r\n</label>\r\n\r\n<div id=\"box\">我是box</div>\r\n```\r\n\r\n### 复选框\r\n\r\n复选框本身会触发两个行为: `勾选` 和 `取消勾选`, 所以复选框可以配置两个`行为`, 例如:\r\n\r\n\r\n```html\r\n<label>\r\n  <input type=\"checkbox\" data-tinyswitch=\"checked ? show : hide #box\"> 显示或者隐藏box\r\n</label> \r\n\r\n<div id=\"box\">我是box</div>\r\n<div id=\"list\">list</div>\r\n```\r\n\r\n### 下拉列表\r\n\r\n```html\r\n<select data-tinyswitch=\"value==1 ? show : hide #box\"> \r\n  <option value=\"1\">value is 1</option>\r\n  <option value=\"2\">value is 2</option>\r\n</select>\r\n\r\n<div id=\"box\">我是box</div>\r\n```\r\n\r\n`value==1 ? show : hide #box` 表示:\r\n\r\n* 当`select`的`value == 1`的时候,执行`show`这个行为\r\n* 当`select`的`value != 1`的时候,执行`hide`这个行为 \r\n\r\n`value==1` 表达式中的`value`关键字表示当前`select`的`value`值\r\n\r\n`TinySwitch` 还支持`index`关键字,表示当前`select`的`selectIndex`索引\r\n \r\n\r\n表达式中目前支持如下运算符:\r\n\r\n* `==`  相等\r\n* `!=`  不等\r\n* `>`   大于\r\n* `<`   小于\r\n* `*=`  包含\r\n* `$=`  结尾等于\r\n* `^=`  开头等于\r\n\r\n当与`value`或者`index`比较的值不是数字时,需要使用**单引号**将内容包裹起来.\r\n\r\n如果在单引号中包含单引号,需要为单引号增加转义符`value='a\\'b`.\r\n\r\n### 更复杂的选择器\r\n\r\n`TinySwitch` 可以使用`jQuery`支持的所有`css`选择器来进行全局的元素定位, 比如:\r\n\r\n```html\r\n<label>\r\n  <input type=\"checkbox\" data-tinyswitch=\"checked ? show : hide #box,#list\"> 显示或者隐藏box 和 list\r\n</label> \r\n\r\n<div id=\"box\">我是box</div>\r\n<div id=\"list\">list</div>\r\n```\r\n\r\n\r\n### 同时使用多个配置\r\n\r\n以上的例子中为了简化, 都使用了一个`action`, `TinySwitch`也支持用分号分隔多个`action`按序执行, 例如:\r\n\r\n\r\n```html\r\n<label>\r\n  <input type=\"checkbox\" data-tinyswitch=\"checked ? show : hide #box; checked ? show : hide #list\"> 显示或者隐藏box 和 list\r\n</label> \r\n\r\n<div id=\"box\">我是box</div>\r\n<div id=\"list\">list</div>\r\n```\r\n\r\n### 多个`action`同时执行\r\n\r\n`TinySwitch` 支持多个用`&`隔开的`action`, 按序执行\r\n\r\n```html\r\n<label>\r\n  <input type=\"checkbox\" data-tinyswitch=\"checked ? show&disabled : hide #box\"> 显示box,并且禁用box中的控件, 或者隐藏box\r\n</label> \r\n\r\n<div id=\"box\">\r\n  我是box\r\n  <input type=\"text\">\r\n</div> \r\n```\r\n\r\n### 全局定位和相对定位元素\r\n\r\n默认情况下,写在`@`前的`selector`是全局定位的, 即:\r\n\r\n`#box@show` 实际上会执行 `$('#box').show()`\r\n\r\n但有很多场景中, 我们需要相对于当前控件对目标的容器进行定位, 比如下例:\r\n\r\n```html \r\n<select data-tinyswitch=\"value==1 ? show : hide .list\"> \r\n  <option value=\"1\">启用</option>\r\n  <option value=\"2\">禁用</option> \r\n</select>  \r\n<div class=\"list\">\r\n  <input type=\"text\" value=\"我是一个文本框\">\r\n</div>\r\n\r\n<select data-tinyswitch=\"value==1 ? show : hide .list\"> \r\n  <option value=\"1\">启用</option>\r\n  <option value=\"2\">禁用</option> \r\n</select>\r\n<div class=\"list\">\r\n  <input type=\"text\" value=\"我是一个文本框\">\r\n</div>\r\n```\r\n\r\n我们希望每个`select`都只控制它下面的`.list`,但这样做会导致两个`.list`同时被控制.\r\n\r\n针对这种场景 `TinySwitch` 提供了一种简单的标记方式来实现相对于当前控件的定位方式:\r\n\r\n```\r\ndata-tinyswitch=\"value==1 ? show : hide next~.list\"\r\n```\r\n \r\n* `next` 表示当前控件的`.next()`节点\r\n* `~` 表示相对定位规则结束\r\n\r\n相对定位规则支持如下标记:\r\n\r\n* `next` \r\n* `prev`\r\n* `nextAll`\r\n* `prevAll`\r\n* `parent`\r\n\r\n你可以组合使用它们,比如:\r\n\r\n\r\n```\r\ndata-tinyswitch=\"value==1 ? show : hide parent.next.next~.list\"\r\n```\r\n \r\n\r\n对于上面的例子,我们可以写成这样来实现需求:\r\n\r\n\r\n```html \r\n<select data-tinyswitch=\"value==1 ? show : hide next~.list\"> \r\n  <option value=\"1\">启用</option>\r\n  <option value=\"2\">禁用</option> \r\n</select>  \r\n<div class=\"list\">\r\n  <input type=\"text\" value=\"我是一个文本框\">\r\n</div>\r\n\r\n<select data-tinyswitch=\"value==1 ? show : hide next~.list\"> \r\n  <option value=\"1\">启用</option>\r\n  <option value=\"2\">禁用</option> \r\n</select>\r\n<div class=\"list\">\r\n  <input type=\"text\" value=\"我是一个文本框\">\r\n</div>\r\n```\r\n### TinySwitch 默认自带的`action` \r\n\r\n1. `show`:   显示这个容器\r\n2. `hide`:   隐藏这个容器\r\n3. `disabled` 或者 `off`:  禁用这个控件, 或者禁用这个容器中的所有控件\r\n4. `enabled`  或者 `on`:  启用这个控件, 或者启用这个容器中的所有控件\r\n5. `focus`:    让当前的控件获得焦点\r\n\r\n你可以通过脚本来增加自定义的`action`\r\n\r\n```javascript\r\n$.tinyswitch.addAction('clearValues',function(elements){\r\n    $(elements).values('');\r\n});\r\n```\r\n\r\n### TinySwitch 的事件\r\n\r\n`TinySwitch`目前只提供两个事件:\r\n\r\n1. `tinyswitch.beforeswitch` 事件, 如果在这个事件中返回`false`, 将停止执行`switch`的操作.\r\n2. `tinyswitch.afterswitch` 事件, `switch`完成之后触发\r\n\r\n例子:\r\n\r\n```javascript\r\n  $('#xxoo').on('tinyswitch.beforeswitch',function(){\r\n    if(location.href.indexOf('xxoo=1')){\r\n      alert('也不知道这么地,反正当前选项对你禁用了.');\r\n      this.checked = true;\r\n      return false;\r\n    }\r\n  })\r\n```\r\n\r\n```javascript\r\n    //使用按钮模拟一个switch\r\n    $('#xxoo').on('tinyswitch.beforeswitch',function(){\r\n        $(this).attr('data-tinyswitchvalue',function(i,v){ return v==='true'?'false':'true' })\r\n    });\r\n```\r\n\r\n\r\n演示: http://darkfe.com/tinyswitch/demo.html","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}